@value
@register_passable("trivial")
struct DiplomatWrite:
    var context: c_void_ptr
    var buf: c_char_ptr
    var len: c_size_t
    var cap: c_size_t
    var flush: fn (UnsafePointer[DiplomatWrite]) -> None
    var grow: fn (UnsafePointer[DiplomatWrite], c_size_t) -> Bool


@value
@register_passable("trivial")
struct DiplomatStringView:
    var data: c_char_ptr
    var len: c_size_t


@value
@register_passable("trivial")
struct OptionI8Result:
    var ok: c_int8
    var is_ok: c_bool


@value
@register_passable("trivial")
struct OptionU8Result:
    var ok: c_uint8
    var is_ok: c_bool


@value
@register_passable("trivial")
struct OptionI16Result:
    var ok: c_int16
    var is_ok: c_bool


@value
@register_passable("trivial")
struct OptionU16Result:
    var ok: c_uint16
    var is_ok: c_bool


@value
@register_passable("trivial")
struct OptionI32Result:
    var ok: c_int32
    var is_ok: c_bool


@value
@register_passable("trivial")
struct OptionU32Result:
    var ok: c_uint32
    var is_ok: c_bool


@value
@register_passable("trivial")
struct OptionI64Result:
    var ok: c_int64
    var is_ok: c_bool


@value
@register_passable("trivial")
struct OptionU64Result:
    var ok: c_uint64
    var is_ok: c_bool


@value
@register_passable("trivial")
struct OptionF32Result:
    var ok: c_float
    var is_ok: c_bool


@value
@register_passable("trivial")
struct OptionF64Result:
    var ok: c_double
    var is_ok: c_bool


@value
@register_passable("trivial")
struct OptionBoolResult:
    var ok: c_bool
    var is_ok: c_bool
